C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\PID.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\SOFTWARE\TASK\COMMON_SOFTWARE\ALGORITHM\PID\PID.c LARGE WARNINGLEVEL(
                    -0) BROWSE DEBUG OBJECTEXTEND PRINT(.\PID.lst) TABS(2) OBJECT(.\PID.obj)

line level    source

   1          /************************************************************
   2          * ×éÖ¯Ãû³Æ£ºµç×Ó´óÈüÐ¡×é
   3          * ÎÄ¼þÃû³Æ: PID.c
   4          * ×÷Õß:     µç×Ó´óÈüÐ¡×é
   5          * °æ±¾ :    1.0
   6          * ÈÕÆÚ:     10/06/17
   7          * ÃèÊö:
   8          * ÀúÊ·ÐÞ¸Ä¼ÇÂ¼:
   9          *  1.ÐÂÔöÁËÔöÁ¿Ê½PIDËã·¨£¬ÔÚ½á¹¹ÌåÖÐ¼ÓÈëÁËÇ°Á½´ÎµÄÎó²î¼ÆËã
  10          *
  11          * <×÷Õß> <Ê±¼ä> <°æ±¾ > <ÃèÊö>
  12          ***********************************************************/
  13          #include <math.h>
  14          #include "PID.h"
  15          #define POSITION           0// Î»ÖÃÊ½PID
  16          #define INCREMENTAL        1//ÔöÁ¿Ê½PID
  17          #define INTEGRAL_SEPARATE  2//»ý·Ö·ÖÀë·¨PID
  18          #define ANTI_WINDUP        3//¿¹»ý·Ö±¥ºÍPID
  19          #define TRAPEZOIDAL        4//ÌÝÐÎ»ý·ÖPID
  20          //pidËã·¨µÄ¾²Ì¬½á¹¹Ìå
  21          
  22          typedef  struct
  23          {
  24            float setParameter;//Éè¶¨½Ç¶ÈÖµ
  25            float actualParameter;//Êµ¼Ê½Ç¶ÈÖµ
  26            float err;//Æ«²îÖµ
  27            float err_last;//ÉÏÒ»´ÎÆ«²îÖµ
  28            float err_prev;//err_lastÉÏÒ»´ÎµÄÆ«²î
  29            float Kp;
  30            float Ki;
  31            float Kd;//±ÈÀý£¬»ý·Ö£¬Î¢·ÖÏµÊý
  32            float integral;//»ý·ÖÖµ,Î»ÖÃÊ½pidËã·¨
  33            float output;  //Êµ¼ÊÊä³öÒò×Ó
  34            float Ki_temp;//±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  35            float Kp_temp;//±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  36            float Kd_temp; //±£´æpidÈý¸ö²ÎÊýµÄ¾²Ì¬±äÁ¿
  37            float parameterUpperLimit;//²ÎÊýÉÏÏÞ
  38            float parameterInferiorLimit;//²ÎÊýÏÂÏÞ
  39            float err_max;//Be allowed max error
  40            u8 state;//pid¹¤×÷×´Ì¬
  41          } pid_info;
  42          
  43          static pid_info g_pid_n_info[PID_NUM];
  44          
  45          /*************************************************
  46          * º¯ÊýÃû³Æ:PID_config
  47          * ÃèÊö: pid³õÊ¼»¯º¯Êý
  48          * ÊäÈë:u8 PID_N, float kp, float ki, float kd
  49          * Êä³ö:
  50          * ·µ»ØÖµ:
  51          * ÆäËûËµÃ÷:
  52          *************************************************/
  53          void PID_config(u8 PID_N, float kp, float ki, float kd)//pidËã·¨³õÊ¼»¯º¯Êý£¬²ÎÊýÊÇÈý¸ö£¬PID
  54          {
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 2   

  55   1        g_pid_n_info[PID_N].err = 0;
  56   1        g_pid_n_info[PID_N].err_last = 0;
  57   1        g_pid_n_info[PID_N].err_prev = 0;
  58   1        g_pid_n_info[PID_N].output = 0;
  59   1        g_pid_n_info[PID_N].integral = 0;
  60   1        g_pid_n_info[PID_N].Kp = kp;
  61   1        g_pid_n_info[PID_N].Ki = ki;
  62   1        g_pid_n_info[PID_N].Kd = kd;
  63   1        g_pid_n_info[PID_N].Kp_temp = g_pid_n_info[PID_N].Kp;
  64   1        g_pid_n_info[PID_N].Ki_temp = g_pid_n_info[PID_N].Ki;
  65   1        g_pid_n_info[PID_N].Kd_temp = g_pid_n_info[PID_N].Kd;
  66   1      }
  67          
  68          //************************************
  69          // Method:    openPID
  70          // FullName:  openPID
  71          // Access:    public 
  72          // Returns:   void
  73          // Qualifier: ´ò¿ªpid
  74          // Parameter: u8 PID_N
  75          //************************************
  76          void openPID(u8 PID_N)
  77          {
  78   1        g_pid_n_info[PID_N].state = ON;
  79   1        //add the code here
  80   1      }
  81          
  82          //************************************
  83          // Method:    closePID
  84          // FullName:  closePID
  85          // Access:    public 
  86          // Returns:   void
  87          // Qualifier:¹Ø±Õpid
  88          // Parameter: u8 PID_N
  89          //************************************
  90          void closePID(u8 PID_N)
  91          {
  92   1        g_pid_n_info[PID_N].state = OFF;
  93   1        //add the code here
  94   1      
  95   1      }
  96          
  97          //************************************
  98          // Method:    Position_PID
  99          // FullName:  Position_PID
 100          // Access:    public 
 101          // Returns:   bit
 102          // Qualifier: ÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpidÔÙÊ¹ÓÃ´Ëº¯Ê
             -ý
 103          // Parameter: u8 PID_N
 104          //************************************
 105          bit Position_PID(u8 PID_N)
 106          {
 107   1        if (g_pid_n_info[PID_N].state)
 108   1        {
 109   2          g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].setParameter - g_pid_n_info[PID_N].actualParameter;
 110   2          g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 111   2          g_pid_n_info[PID_N].output  = g_pid_n_info[PID_N].Kp * g_pid_n_info[PID_N].err      //kp * error//Îó²î
 112   2                                      + g_pid_n_info[PID_N].Ki * g_pid_n_info[PID_N].integral     //ki * error_integral//Îó²î»ý·
             -Ö
 113   2                                      + g_pid_n_info[PID_N].Kd * (g_pid_n_info[PID_N].err - g_pid_n_info[PID_N].err_last);//kd *
             - error_differential//Îó²îÎ¢·Ö
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 3   

 114   2          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 115   2          return 1;
 116   2        }
 117   1        return 0;
 118   1      }
 119          
 120          //************************************
 121          // Method:    Integral_Separa_PID
 122          // FullName:  Integral_Separa_PID
 123          // Access:    public 
 124          // Returns:   bit
 125          // Qualifier: »ý·Ö·ÖÀëPIDÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpid
             -ÔÙÊ¹ÓÃ´Ëº¯Êý
 126          // Parameter: u8 PID_N
 127          //************************************
 128          bit Integral_Separa_PID(u8 PID_N)
 129          {
 130   1        unsigned int multiple;
 131   1        g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].setParameter - g_pid_n_info[PID_N].actualParameter;
 132   1        if (g_pid_n_info[PID_N].state)
 133   1        {
 134   2          if(g_pid_n_info[PID_N].err > g_pid_n_info[PID_N].err_max)
 135   2          {
 136   3            multiple = 0;
 137   3          }
 138   2          else
 139   2          {
 140   3            multiple = 1;
 141   3            g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 142   3          }
 143   2      /*************PIDËã·¨²¿·Ö*****************/
 144   2          g_pid_n_info[PID_N].output  = g_pid_n_info[PID_N].Kp * g_pid_n_info[PID_N].err      //kp * error//Îó²î
 145   2                                      + g_pid_n_info[PID_N].Ki * g_pid_n_info[PID_N].integral * multiple    //ki * error_integra
             -l//Îó²î»ý·Ö
 146   2                                      + g_pid_n_info[PID_N].Kd * (g_pid_n_info[PID_N].err - g_pid_n_info[PID_N].err_last);//kd *
             - error_differential//Îó²îÎ¢·Ö
 147   2          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 148   2          return 1;
 149   2        }
 150   1        return 0;
 151   1      }
 152          
 153          //************************************
 154          // Method:    Anti_Windup_PID
 155          // FullName:  Anti_Windup_PID
 156          // Access:    public 
 157          // Returns:   bit
 158          // Qualifier: ¿¹»ý·Ö±¥ºÍPIDÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªp
             -idÔÙÊ¹ÓÃ´Ëº¯Êý
 159          // Parameter: u8 PID_N
 160          //************************************
 161          bit Anti_Windup_PID(u8 PID_N)
 162          {
 163   1        unsigned int multiple;
 164   1        g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].setParameter - g_pid_n_info[PID_N].actualParameter;
 165   1        if (g_pid_n_info[PID_N].state)
 166   1        {
 167   2          if(g_pid_n_info[PID_N].actualParameter > g_pid_n_info[PID_N].parameterUpperLimit)
 168   2          {
 169   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 170   3            {
 171   4              multiple = 0;
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 4   

 172   4            }
 173   3            else
 174   3            {
 175   4              multiple = 1;
 176   4              if(g_pid_n_info[PID_N].err < 0)
 177   4              {
 178   5                g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 179   5              }
 180   4            }
 181   3          }
 182   2          else if(g_pid_n_info[PID_N].actualParameter < g_pid_n_info[PID_N].parameterUpperLimit)
 183   2          {
 184   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 185   3            {
 186   4              multiple = 0;
 187   4            }
 188   3            else
 189   3            {
 190   4              multiple = 1;
 191   4              if(g_pid_n_info[PID_N].err > 0)
 192   4              {
 193   5                g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 194   5              }
 195   4            }
 196   3          }
 197   2          else
 198   2          {
 199   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 200   3            {
 201   4              multiple = 0;
 202   4            }
 203   3            else
 204   3            {
 205   4              multiple = 1;
 206   4              g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 207   4            }
 208   3          }
 209   2      /*************PIDËã·¨²¿·Ö*****************/
 210   2          g_pid_n_info[PID_N].output  = g_pid_n_info[PID_N].Kp * g_pid_n_info[PID_N].err     //kp * error//Îó²î
 211   2                                      + g_pid_n_info[PID_N].Ki * g_pid_n_info[PID_N].integral * multiple    //ki * error_integra
             -l//Îó²î»ý·Ö
 212   2                                      + g_pid_n_info[PID_N].Kd * (g_pid_n_info[PID_N].err - g_pid_n_info[PID_N].err_last);//kd *
             - error_differential//Îó²îÎ¢·Ö
 213   2          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 214   2          return 1;
 215   2        }
 216   1        return 0;
 217   1      }
 218          
 219          //************************************
 220          // Method:    Trapezoidal_Integral_PID
 221          // FullName:  Trapezoidal_Integral_PID
 222          // Access:    public 
 223          // Returns:   bit
 224          // Qualifier: ÌÝÐÎ»ý·ÖPIDÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpid
             -ÔÙÊ¹ÓÃ´Ëº¯Êý
 225          // Parameter: u8 PID_N
 226          //************************************
 227          bit Trapezoidal_Integral_PID(u8 PID_N)
 228          {
 229   1        unsigned int multiple;
 230   1        g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].setParameter - g_pid_n_info[PID_N].actualParameter;
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 5   

 231   1        if (g_pid_n_info[PID_N].state)
 232   1        {
 233   2          if(g_pid_n_info[PID_N].actualParameter > g_pid_n_info[PID_N].parameterUpperLimit)
 234   2          {
 235   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 236   3            {
 237   4              multiple = 0;
 238   4            }
 239   3            else
 240   3            {
 241   4              multiple = 1;
 242   4              if(g_pid_n_info[PID_N].err < 0)
 243   4              {
 244   5                g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 245   5              }
 246   4            }
 247   3          }
 248   2          else if(g_pid_n_info[PID_N].actualParameter < g_pid_n_info[PID_N].parameterUpperLimit)
 249   2          {
 250   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 251   3            {
 252   4              multiple = 0;
 253   4            }
 254   3            else
 255   3            {
 256   4              multiple = 1;
 257   4              if(g_pid_n_info[PID_N].err > 0)
 258   4              {
 259   5                g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 260   5              }
 261   4            }
 262   3          }
 263   2          else
 264   2          {
 265   3            if(abs(g_pid_n_info[PID_N].err) > g_pid_n_info[PID_N].err_max)
 266   3            {
 267   4              multiple = 0;
 268   4            }
 269   3            else
 270   3            {
 271   4              multiple = 1;
 272   4              g_pid_n_info[PID_N].integral += g_pid_n_info[PID_N].err;//Îó²î»ýÀÛ
 273   4            }
 274   3          }
 275   2      /*************PIDËã·¨²¿·Ö*****************/
 276   2          g_pid_n_info[PID_N].output  = g_pid_n_info[PID_N].Kp * g_pid_n_info[PID_N].err      //kp * error//Îó²î
 277   2                                      + g_pid_n_info[PID_N].Ki * g_pid_n_info[PID_N].integral * multiple / 2    //ki * error_int
             -egral//Îó²î»ý·Ö
 278   2                                      + g_pid_n_info[PID_N].Kd * (g_pid_n_info[PID_N].err - g_pid_n_info[PID_N].err_last);//kd *
             - error_differential//Îó²îÎ¢·Ö
 279   2          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 280   2          return 1;
 281   2        } 
 282   1        return 0;
 283   1      }
 284          
 285          //************************************
 286          // Method:    Incremental_PID
 287          // FullName:  Incremental_PID
 288          // Access:    public 
 289          // Returns:   void
 290          // Qualifier: ÔöÁ¿Ê½PIDËã·¨£¬ÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 6   

             -ªpidÔÙÊ¹ÓÃ´Ëº¯Êý
 291          // Parameter: u8 PID_N
 292          //************************************
 293          bit Incremental_PID(u8 PID_N)
 294          {
 295   1        if(g_pid_n_info[PID_N].state)
 296   1        {
 297   2          g_pid_n_info[PID_N].err = g_pid_n_info[PID_N].setParameter - g_pid_n_info[PID_N].actualParameter;
 298   2          g_pid_n_info[PID_N].output = g_pid_n_info[PID_N].Kp * g_pid_n_info[PID_N].err// kp * err
 299   2                                       - g_pid_n_info[PID_N].Ki * g_pid_n_info[PID_N].err_last// ki * err_last
 300   2                                       + g_pid_n_info[PID_N].Kd * g_pid_n_info[PID_N].err_prev;//kd * err_prev
 301   2          g_pid_n_info[PID_N].err_prev = g_pid_n_info[PID_N].err_last;
 302   2          g_pid_n_info[PID_N].err_last = g_pid_n_info[PID_N].err;
 303   2          return 1;
 304   2        }
 305   1        return 0;
 306   1      }
 307          
 308          //************************************
 309          // Method:    setParameterInferiorLimit
 310          // FullName:  setParameterInferiorLimit
 311          // Access:    public 
 312          // Returns:   void
 313          // Qualifier: ÉèÖÃÊäÈëÊýÖµÏÂÏÞ
 314          // Parameter: u8 PID_N
 315          // Parameter: float value
 316          //************************************
 317          void setParameterInferiorLimit(u8 PID_N, float value)
 318          {
 319   1        g_pid_n_info[PID_N].parameterInferiorLimit = value;
 320   1      }
 321          
 322          //************************************
 323          // Method:    setParameterUpperLimit
 324          // FullName:  setParameterUpperLimit
 325          // Access:    public 
 326          // Returns:   void
 327          // Qualifier: ÉèÖÃÊäÈëÊýÖµÉÏÏÞ
 328          // Parameter: u8 PID_N
 329          // Parameter: float value
 330          //************************************
 331          void setParameterUpperLimit(u8 PID_N, float value)
 332          {
 333   1        g_pid_n_info[PID_N].parameterUpperLimit = value;
 334   1      
 335   1      }
 336          
 337          //************************************
 338          // Method:    setActualParameter
 339          // FullName:  setActualParameter
 340          // Access:    public 
 341          // Returns:   void
 342          // Qualifier: ÉèÖÃÊµ¼ÊÊäÈëÊýÖµ
 343          // Parameter: u8 PID_N
 344          // Parameter: float value
 345          //************************************
 346          void setActualParameter(u8 PID_N, float value)
 347          {
 348   1        g_pid_n_info[PID_N].actualParameter = value;
 349   1      
 350   1      }
 351          
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 7   

 352          //************************************
 353          // Method:    setKi
 354          // FullName:  setKi
 355          // Access:    public 
 356          // Returns:   void
 357          // Qualifier: ÉèÖÃPIDµÄKiÖµ
 358          // Parameter: u8 PID_N
 359          // Parameter: float value
 360          //************************************
 361          void setKi(u8 PID_N, float value)
 362          {
 363   1        g_pid_n_info[PID_N].Ki = value;
 364   1      }
 365          
 366          //************************************
 367          // Method:    setKp
 368          // FullName:  setKp
 369          // Access:    public 
 370          // Returns:   void
 371          // Qualifier: ÉèÖÃPIDµÄKpÖµ
 372          // Parameter: u8 PID_N
 373          // Parameter: float value
 374          //************************************
 375          void setKp(u8 PID_N, float value)
 376          {
 377   1        g_pid_n_info[PID_N].Kp = value;
 378   1      }
 379          
 380          //************************************
 381          // Method:    setKd
 382          // FullName:  setKd
 383          // Access:    public 
 384          // Returns:   void
 385          // Qualifier: ÉèÖÃPIDµÄKdÖµ
 386          // Parameter: u8 PID_N
 387          // Parameter: float value
 388          //************************************
 389          void setKd(u8 PID_N, float value)
 390          {
 391   1        g_pid_n_info[PID_N].Kd = value;
 392   1      }
 393          
 394          //************************************
 395          // Method:    setParameter
 396          // FullName:  setParameter
 397          // Access:    public 
 398          // Returns:   void
 399          // Qualifier: ÉèÖÃPIDµÄÄ¿±êÊýÖµ
 400          // Parameter: u8 PID_N
 401          // Parameter: float value
 402          //************************************
 403          void setParameter(u8 PID_N, float value)
 404          {
 405   1        g_pid_n_info[PID_N].setParameter = value;
 406   1      }
 407          
 408          
 409          //************************************
 410          // Method:    getParameter
 411          // FullName:  getParameter
 412          // Access:    public 
 413          // Returns:   float
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 8   

 414          // Qualifier: ¶ÁÈ¡PIDµÄÄ¿±êÊýÖµ
 415          // Parameter: u8 PID_N
 416          //************************************
 417          float getParameter(u8 PID_N)
 418          {
 419   1        return  g_pid_n_info[PID_N].setParameter;
 420   1      }
 421          
 422          //************************************
 423          // Method:    getErr
 424          // FullName:  getErr
 425          // Access:    public 
 426          // Returns:   float
 427          // Qualifier: ¶ÁÈ¡PIDµÄÕâÒ»´ÎÎó²îÖµ
 428          // Parameter: u8 PID_N
 429          //************************************
 430          float getErr(u8 PID_N)
 431          {
 432   1        return  g_pid_n_info[PID_N].err;
 433   1      }
 434          
 435          //************************************
 436          // Method:    getErrLast
 437          // FullName:  getErrLast
 438          // Access:    public 
 439          // Returns:   float
 440          // Qualifier: ¶ÁÈ¡PIDµÄÉÏÒ»´ÎÎó²îÖµ
 441          // Parameter: u8 PID_N
 442          //************************************
 443          float getErrLast(u8 PID_N)
 444          {
 445   1        return  g_pid_n_info[PID_N].err_last;
 446   1      }
 447          
 448          //************************************
 449          // Method:    getKp
 450          // FullName:  getKp
 451          // Access:    public 
 452          // Returns:   float
 453          // Qualifier: ¶ÁÈ¡PIDµÄKpÖµ
 454          // Parameter: u8 PID_N
 455          //************************************
 456          float getKp(u8 PID_N)
 457          {
 458   1        return  g_pid_n_info[PID_N].Kp;
 459   1      }
 460          
 461          //************************************
 462          // Method:    getKi
 463          // FullName:  getKi
 464          // Access:    public 
 465          // Returns:   float
 466          // Qualifier: ¶ÁÈ¡PIDµÄKiÖµ
 467          // Parameter: u8 PID_N
 468          //************************************
 469          float getKi(u8 PID_N)
 470          {
 471   1        return  g_pid_n_info[PID_N].Ki;
 472   1      }
 473          
 474          //************************************
 475          // Method:    getKd
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 9   

 476          // FullName:  getKd
 477          // Access:    public 
 478          // Returns:   float
 479          // Qualifier: ¶ÁÈ¡pidµÄKd²ÎÊýÖµ
 480          // Parameter: u8 PID_N
 481          //************************************
 482          float getKd(u8 PID_N)
 483          {
 484   1        return  g_pid_n_info[PID_N].Kd;
 485   1      }
 486          
 487          //************************************
 488          // Method:    getOutput
 489          // FullName:  getOutput
 490          // Access:    public 
 491          // Returns:   float
 492          // Qualifier: ¶ÁÈ¡pidÊä³öÖµ
 493          // Parameter: u8 PID_N
 494          //************************************
 495          float getOutput(u8 PID_N)
 496          {
 497   1        return  g_pid_n_info[PID_N].output;
 498   1      }
 499          
 500          //************************************
 501          // Method:    getIntegral
 502          // FullName:  getIntegral
 503          // Access:    public 
 504          // Returns:   float
 505          // Qualifier: ¶ÁÈ¡pid»ý·ÖÖµ
 506          // Parameter: u8 PID_N
 507          //************************************
 508          float getIntegral(u8 PID_N)
 509          {
 510   1        return  g_pid_n_info[PID_N].integral;
 511   1      }
 512          
 513          //************************************
 514          // Method:    setMaxError
 515          // FullName:  setMaxError
 516          // Access:    public 
 517          // Returns:   float
 518          // Qualifier: set max error of pid calculate can be awlloed
 519          // Parameter: u8 PID_N
 520          //************************************
 521          void setMaxError(u8 PID_N,float err_max)
 522          {
 523   1        g_pid_n_info[PID_N].err_max = err_max;
 524   1      }
 525          
 526          //************************************
 527          // Method:    PID
 528          // FullName:  PID
 529          // Access:    public 
 530          // Returns:   bit
 531          // Qualifier: ÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpidÔÙÊ¹ÓÃ´Ëº¯Ê
             -ý
 532          //            ½öÌá¹©Î»ÖÃÀàPIDËã·¨
 533          // Parameter: u8 PID_N
 534          //************************************
 535          void PosClassPID(u8 PID_N,u8 PID_MODE)
 536          {
C51 COMPILER V8.05a   PID                                                                  08/09/2017 19:30:54 PAGE 10  

 537   1        if(g_pid_n_info[PID_N].state)
 538   1        {
 539   2          switch(PID_MODE)
 540   2          {
 541   3            case POSITION:
 542   3              Position_PID(PID_N);
 543   3              break;
 544   3            case INTEGRAL_SEPARATE:
 545   3              Integral_Separa_PID(PID_N);
 546   3              break;
 547   3            case ANTI_WINDUP:
 548   3              Anti_Windup_PID(PID_N);
 549   3              break;
 550   3            case TRAPEZOIDAL:
 551   3              Trapezoidal_Integral_PID(PID_N);
 552   3              break;
 553   3          }
 554   2        }
 555   1      }
 556          
 557          //************************************
 558          // Method:    IncClassPID
 559          // FullName:  IncClassPID
 560          // Access:    public 
 561          // Returns:   bit
 562          // Qualifier: ÉèÖÃºÃ²ÎÊýºóÊ¹ÓÃ´Ëº¯Êý½øÐÐpidÔËËã£¬Ö®ºóÊ¹ÓÃget**º¯Êý»ñÈ¡¼ÆËãºóµÄÖµ£¬ÐèÒªÏÈ´ò¿ªpidÔÙÊ¹ÓÃ´Ëº¯Ê
             -ý
 563          //            ½öÌá¹©ÔöÁ¿ÀàPIDËã·¨
 564          // Parameter: u8 PID_N
 565          //************************************
 566          void IncClassPID(u8 PID_N,u8 PID_MODE)
 567          {
 568   1        if(g_pid_n_info[PID_N].state)
 569   1        {
 570   2          switch(PID_MODE)
 571   2          {
 572   3            case INCREMENTAL:
 573   3              Incremental_PID(PID_N);
 574   3              break;
 575   3          }
 576   2        }
 577   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    130      65
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
